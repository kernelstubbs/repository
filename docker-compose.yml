---
version: "3.7"

x-defaultCONF: &defaultCONF
  domainname: beowulf.cc
  restart: always
  labels: [com.centurylinklabs.watchtower.enable="true"]
  env_file:
    - ./env/global.env
x-driver_opts: &driverOpts
    type: nfs
    o: addr=10.10.10.252,rw,bg,intr,soft,nolock
x-nfs-driver: &nfsDriver
  driver: local

services:
########################################################################
##
##          Management
##
##    Traefik - Reverse proxy and SSL encryption
##    piHole - DNS and AD blocking
##    Portainer - Container management and administration
##    Watchtower - Container update service
##    
##
########################################################################
  traefik:
    container_name: traefik
    image: traefik
    hostname: traefik
    <<: *defaultCONF
    env_file: [./env/traefik.env]
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # LetsEncrypt
      - "--certificatesresolvers.CFWildcard.acme.email=stubbe@live.ca"
      - "--certificatesresolvers.CFWildcard.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.CFWildcard.acme.storage=/etc/traefik/acme.json"
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.beowulf.cc`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.services.traefik.loadbalancer.server.scheme=http"
      # HTTP ==> HTTPS
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:[a-z-.]+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # CF Wildcard
      - "traefik.http.routers.traefik.tls.domains[0].main=beowulf.cc"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.beowulf.cc"
      - "traefik.http.routers.traefik.tls.certresolver=CFWildcard"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - torrent-net
      - piHole-net
      - port-net
      - plex-net
      - forge-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefikETC:/etc/traefik
  pihole:
    container_name: pihole
    image: pihole/pihole
    hostname: pihole
    <<: *defaultCONF
    env_file:
      - ./env/pihole.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.beowulf.cc`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls.certresolver=CFWildcard"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefikpihole.docker.network=docker_piHole-net"
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
    networks:
      - piHole-net
    volumes:
      - PiETC:/etc/pihole/
      - PiMasq:/etc/dnsmasq.d/
  portainer:
    container_name: portainer
    image: portainer/portainer
    hostname: portainer
    command: -H unix:///var/run/docker.sock
    <<: *defaultCONF
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.beowulf.cc`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=CFWildcard"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefikpihole.docker.network=docker_port-net"
    networks: [port-net]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - PortainerDAT:/data
  watchtower:
    container_name: watchtower
    image: v2tec/watchtower
    command: --cleanup --schedule "0 0 3 * * *" --label-enable
    <<: *defaultCONF
    volumes: [/var/run/docker.sock:/var/run/docker.sock]

########################################################################
##
##          Gaming
##
##    Minecraft/Forge - Modded Minecraft serverles
##    rcon - Server CLI management interface
##    
##
########################################################################
  minecraft:
    container_name: forge
    image: itzg/minecraft-server
    hostname: forge
    <<: *defaultCONF
    env_file: [./env/forge.env]
    ports:
      - "28016:28016"
      - "25565:25565"
    networks: [forge-net]
    volumes: [forgeMC:/data]
  rcon:
    container_name: rcon
    image: itzg/rcon
    hostname: rcon
    <<: *defaultCONF
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rcon.rule=Host(`rcon.beowulf.cc`)"
      - "traefik.http.routers.rcon.entrypoints=websecure"
      - "traefik.http.routers.rcon.tls.certresolver=CFWildcard"
      - "traefik.http.services.rcon.loadbalancer.server.port=4326"
      - "traefikpihole.docker.network=docker_forge-net"
    ports:
      - "4327:4327"
    networks: [forge-net]
    volumes: [rcon:/opt/rcon-web-admin/db]

########################################################################
##
##          Media
##
##    Plex - Media/Streaming server
##    Radarr - Movie downloading and library bigip_management
##    Sonarr - Television download scheduling
##
##        ####################################
##        ##          VPN Containers
##        ####################################
##        VPN - NordVPN container [Requires Subscription]
##        Deluge - Torrent downloading
##        Jackett - Magnet link rss generator for Sonarr and Radarr
##
##
########################################################################
  plex:
    container_name: plex
    image: linuxserver/plex
    hostname: plex
    <<: *defaultCONF
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.beowulf.cc`)"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=CFWildcard"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
      - "traefikpihole.docker.network=docker_plex-net"
    ports:
      - "1900:1900/udp"
      - "3005:3005/tcp"
      - "5353:5353/udp"
      - "8324:8324/tcp"
      - "32410:32410/udp"
      - "32412-32414:32412-32414/udp"
      - "32469:32469"
      - "32469:32469/udp"
    networks: [plex-net]
    volumes:
      - PlexCFG:/config
      - PlexLib:/data
  radarr:
    container_name: radarr
    image: linuxserver/radarr
    hostname: radarr
    <<: *defaultCONF
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.beowulf.cc`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=CFWildcard"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      - "traefikpihole.docker.network=docker_torrent-net"
    networks:
      - torrent-net
      - plex-net
    volumes:
      - RadarrCFG:/config
      - PlexMovies:/movies
      - Downloads:/downloads
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr
    hostname: sonarr
    <<: *defaultCONF
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.beowulf.cc`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=CFWildcard"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      - "traefikpihole.docker.network=docker_torrent-net"
    networks:
      - torrent-net
      - plex-net
    volumes:
      - SonarrCFG:/config
      - PlexTV:/tv
      - Downloads:/downloads

####################################
##
##          VPN Containers
##
####################################
  vpn:
    container_name: vpn
    image: bubuntux/nordvpn
    hostname: vpn
    <<: *defaultCONF
    env_file: [./env/nordvpn.env]
    labels:
      - "traefik.enable=true"
      - "traefikpihole.docker.network=docker_torrent-net"
      # deluge
      - "traefik.http.routers.deluge.rule=Host(`deluge.beowulf.cc`)"
      - "traefik.http.routers.deluge.entrypoints=websecure"
      - "traefik.http.routers.deluge.tls.certresolver=CFWildcard"
      - "traefik.http.routers.deluge.service=deluge"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"
      # jackett
      - "traefik.http.routers.jackett.rule=Host(`jackett.beowulf.cc`)"
      - "traefik.http.routers.jackett.entrypoints=websecure"
      - "traefik.http.routers.jackett.tls.certresolver=CFWildcard"
      - "traefik.http.routers.jackett.service=jackett"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
      # vpn
      - "traefik.http.routers.vpn.rule=Host(`vpn.beowulf.cc`)"
      - "traefik.http.routers.vpn.entrypoints=websecure"
      - "traefik.http.routers.vpn.tls.certresolver=CFWildcard"
      - "traefik.http.routers.vpn.service=vpn"
      - "traefik.http.services.vpn.loadbalancer.server.port=8118"
    ports:
      - "58846:58846"
      - "58946:58946"
    networks: [torrent-net]
    devices: [/dev/net/tun]
    cap_add: [NET_ADMIN]
  deluge: # Watchtower currently cannot update containers in a vpn
    container_name: deluge
    image: linuxserver/deluge
    <<: *defaultCONF
    labels: [com.centurylinklabs.watchtower.enable="false"]
    volumes:
      - DelugeCFG:/config
      - Downloads:/downloads
    network_mode: service:vpn
    depends_on: [vpn]
  jackett: # Watchtower currently cannot update containers in a vpn
    container_name: jackett
    image: linuxserver/jackett
    <<: *defaultCONF
    labels: [com.centurylinklabs.watchtower.enable="false"]
    volumes:
      - JackettCFG:/config
      - TMP:/downloads
    network_mode: service:vpn
    depends_on: [vpn]
    
networks:
  forge-net:
  piHole-net:
  port-net:
  plex-net:
  torrent-net:

volumes:
  DelugeCFG:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/deluge/config"
  Downloads:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/downloads"
  forgeMC: 
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/forge/data"
  JackettCFG:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/jackett/config"
  piETC:
    <<: *nfsDriver
    driver_opts:
    <<: *driverOpts
    device: ":/volume1/docker/pihole/etc-pihole"
  piMasq:
    <<: *nfsDriver
    driver_opts:
    <<: *driverOpts
    device: ":/volume1/docker/pihole/dnsmasq.d"
  PlexCFG:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/plex/config"
  PlexLib:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/plex/library"
  PlexMovies:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/plex/library/movies"
  PlexTV:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/plex/library/television"
  PortainerDAT:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/portainer/data"
  RadarrCFG: 
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/radarr/config"
  rcon: 
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/rcon/db"
  SonarrCFG:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/sonarr/config"
  TMP:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/tmp"
  traefikETC:
    <<: *nfsDriver
    driver_opts:
      <<: *driverOpts
      device: ":/volume1/docker/traefik/etc"